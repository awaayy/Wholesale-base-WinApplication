// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace UPpril.Models;

public partial class opt_baseContext : DbContext
{
    public opt_baseContext()
    {
    }

    public opt_baseContext(DbContextOptions<opt_baseContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Consumer> Consumers { get; set; }

    public virtual DbSet<Consumer_Product> Consumer_Products { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<Order_Consumer> Order_Consumers { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<Product_Warehouse_Supplier> Product_Warehouse_Suppliers { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    public virtual DbSet<Supply> Supplies { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Warehouse> Warehouses { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer("Data Source=DESKTOP-N7MIDVG\\SQLEXPRESS;Initial Catalog=opt_base;Integrated Security=True;Encrypt=True;TrustServerCertificate=True");


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Consumer>(entity =>
        {
            entity.HasKey(e => e.Consumer_ID);

            entity.ToTable("Consumer");

            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Home)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.Street)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Surname)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Telephone)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Consumer_Product>(entity =>
        {
            entity.HasKey(e => e.Consumer_Product_ID);

            entity.ToTable("Consumer_Product");

            entity.HasOne(d => d.Consumer).WithMany(p => p.Consumer_Products)
                .HasForeignKey(d => d.Consumer_ID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Consumer_Product_Consumer");

            entity.HasOne(d => d.Product).WithMany(p => p.Consumer_Products)
                .HasForeignKey(d => d.Product_ID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Consumer_Product_Product");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.Order_ID);

            entity.ToTable("Order");
        });

        modelBuilder.Entity<Order_Consumer>(entity =>
        {
            entity.HasKey(e => e.Order_Consumer_ID);

            entity.ToTable("Order_Consumer");

            entity.HasOne(d => d.Consumer).WithMany(p => p.Order_Consumers)
                .HasForeignKey(d => d.Consumer_ID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Order_Consumer_Consumer");

            entity.HasOne(d => d.Order).WithMany(p => p.Order_Consumers)
                .HasForeignKey(d => d.Order_ID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Order_Consumer_Order");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.Product_ID).HasName("PK_Product_1");

            entity.ToTable("Product", tb => tb.HasTrigger("trg_Product_Delete"));

            entity.Property(e => e.Cost).HasColumnType("money");
            entity.Property(e => e.Product_Name)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.HasOne(d => d.Order).WithMany(p => p.Products)
                .HasForeignKey(d => d.Order_ID)
                .HasConstraintName("FK_Product_Order");
        });

        modelBuilder.Entity<Product_Warehouse_Supplier>(entity =>
        {
            entity.HasKey(e => e.Product_Warehouse_Supplier_ID);

            entity.ToTable("Product_Warehouse_Supplier");

            entity.HasOne(d => d.Product).WithMany(p => p.Product_Warehouse_Suppliers)
                .HasForeignKey(d => d.Product_ID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Product_Warehouse_Supplier_Product");

            entity.HasOne(d => d.Supplier).WithMany(p => p.Product_Warehouse_Suppliers)
                .HasForeignKey(d => d.Supplier_ID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Product_Warehouse_Supplier_Supplier");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.Product_Warehouse_Suppliers)
                .HasForeignKey(d => d.Warehouse_ID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Product_Warehouse_Supplier_Warehouse");
        });

        modelBuilder.Entity<Supplier>(entity =>
        {
            entity.HasKey(e => e.Supplier_ID);

            entity.ToTable("Supplier");

            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Company_Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Home)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.Street)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Surname_Director)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Telephone)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Supply>(entity =>
        {
            entity.HasKey(e => e.Supply_ID).HasName("PK_Supply_1");

            entity.ToTable("Supply");

            entity.Property(e => e.Supply_ID).ValueGeneratedOnAdd();
            entity.Property(e => e.Unit_of_Measuring)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.HasOne(d => d.SupplyNavigation).WithOne(p => p.Supply)
                .HasForeignKey<Supply>(d => d.Supply_ID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Supply_Product");

            entity.HasOne(d => d.Supply1).WithOne(p => p.Supply)
                .HasForeignKey<Supply>(d => d.Supply_ID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Supply_Supplier");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.User_ID);

            entity.ToTable("User");

            entity.Property(e => e.Login)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Role)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Warehouse>(entity =>
        {
            entity.HasKey(e => e.Warehouse_ID);

            entity.ToTable("Warehouse");

            entity.Property(e => e.Product_Name)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Unit_of_Measuring)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}